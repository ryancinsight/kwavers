name: PINN Cloud Deployment

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Dockerfile'
      - 'k8s/**'
  pull_request:
    branches: [main]
    paths:
      - 'src/**'
      - 'Cargo.toml'
      - 'Dockerfile'
      - 'k8s/**'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    name: Test PINN Implementation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache dependencies
      uses: Swatinem/rust-cache@v2

    - name: Run tests
      run: cargo test --features pinn --release --verbose

    - name: Run clippy
      run: cargo clippy --features pinn -- -D warnings

    - name: Generate test coverage
      uses: taiki-e/install-action@cargo-llvm-cov
      run: cargo llvm-cov --features pinn --lcov --output-path lcov.info

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: lcov.info

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          BUILDKIT_INLINE_CACHE=1

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: staging
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name pinn-staging-cluster

    - name: Deploy to Kubernetes
      run: |
        # Update image tag in deployment
        sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}|g" k8s/deployment.yaml

        # Apply Kubernetes manifests
        kubectl apply -f k8s/

        # Wait for rollout to complete
        kubectl rollout status deployment/pinn-deployment --timeout=600s

    - name: Run integration tests
      run: |
        # Wait for service to be ready
        kubectl wait --for=condition=available --timeout=300s deployment/pinn-deployment

        # Get service endpoint
        SERVICE_IP=$(kubectl get svc pinn-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        # Run health checks
        curl -f http://$SERVICE_IP/health

        # Run basic PINN inference test
        curl -X POST http://$SERVICE_IP/predict \
          -H "Content-Type: application/json" \
          -d '{"input": [1.0, 0.5, 0.0]}'

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_PROD }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_PROD }}
        aws-region: us-east-1

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Configure kubectl for EKS
      run: |
        aws eks update-kubeconfig --region us-east-1 --name pinn-production-cluster

    - name: Deploy to Production
      run: |
        # Update image tag in deployment
        sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}@${{ needs.build.outputs.image-digest }}|g" k8s/deployment.yaml

        # Apply Kubernetes manifests
        kubectl apply -f k8s/

        # Wait for rollout to complete with canary deployment
        kubectl rollout status deployment/pinn-deployment --timeout=1200s

    - name: Post-deployment validation
      run: |
        # Comprehensive health checks
        SERVICE_IP=$(kubectl get svc pinn-service -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')

        # Health endpoint
        curl -f http://$SERVICE_IP/health

        # Metrics endpoint
        curl -f http://$SERVICE_IP/metrics

        # Load test with multiple concurrent requests
        for i in {1..10}; do
          curl -X POST http://$SERVICE_IP/predict \
            -H "Content-Type: application/json" \
            -d '{"input": [1.0, 0.5, 0.0]}' &
        done
        wait

    - name: Notify deployment success
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: "PINN production deployment completed successfully üöÄ"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: success()

    - name: Notify deployment failure
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: "PINN production deployment failed ‚ùå"
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      if: failure()
