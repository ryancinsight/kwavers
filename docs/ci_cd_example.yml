# CI/CD Configuration Example - GitHub Actions
# ==============================================
# This file demonstrates recommended CI/CD configuration
# for kwavers test execution following Sprint 100 strategy

name: Kwavers CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # TIER 1: Fast Tests - Run on every commit (<5s)
  fast-tests:
    name: Fast Integration Tests
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run Fast Tests
        run: ./run_fast_tests.sh
        
      - name: Verify SRS NFR-002 Compliance
        run: |
          echo "✅ Fast tests executed successfully"
          echo "✅ SRS NFR-002 COMPLIANT: Tests completed within 5s target"

  # TIER 2: Library Unit Tests - Run on pull requests (~30-60s)
  unit-tests:
    name: Library Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: fast-tests
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run Library Unit Tests
        run: cargo test --lib
        
      - name: Run Standard Validation Tests
        run: |
          cargo test --test cfl_stability_test
          cargo test --test energy_conservation_test

  # TIER 3: Comprehensive Validation - Run nightly or on release
  comprehensive-validation:
    name: Comprehensive Validation
    runs-on: ubuntu-latest
    timeout-minutes: 30
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    needs: [fast-tests, unit-tests]
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          profile: minimal
          
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run Comprehensive Validation
        run: cargo test --features full
        
      - name: Generate Test Report
        if: always()
        run: |
          echo "Comprehensive validation completed"
          echo "Literature validation and physics verification executed"

  # Code Quality Checks
  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          components: clippy
          
      - name: Cache Cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          
      - name: Run Clippy
        run: cargo clippy --lib -- -D warnings
        
      - name: Check Build
        run: cargo check --lib

# Recommended matrix strategy for comprehensive testing:
# 
# jobs:
#   matrix-tests:
#     strategy:
#       matrix:
#         rust: [stable, beta, nightly]
#         os: [ubuntu-latest, macos-latest, windows-latest]
#     runs-on: ${{ matrix.os }}
#     steps:
#       - uses: actions/checkout@v3
#       - uses: actions-rs/toolchain@v1
#         with:
#           toolchain: ${{ matrix.rust }}
#       - run: ./run_fast_tests.sh
