[package]
name = "kwavers"
version = "2.13.0"
edition = "2021"
authors = ["Kwavers Team <team@kwavers.org>"]
description = "Ultrasound Simulation Toolbox with Cavitation and Light Physics"
license = "MIT"
repository = "https://github.com/kwavers/kwavers"
keywords = ["ultrasound", "simulation", "physics", "cavitation", "sonoluminescence", "medical-imaging"]
categories = ["science", "simulation", "medical"]

[dependencies]
# Core numerical computing
ndarray = "0.15"
rayon = { version = "1.5" }
rustfft = "6.0"
num-complex = "0.4"

# Serialization and configuration
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
toml = "0.8"
thiserror = "1.0"
anyhow = "1.0"

# Medical imaging formats
nifti = "0.17.0"

# Logging and error handling
log = "0.4"
env_logger = "0.10"
chrono = { version = "0.4", features = ["serde"] }
parking_lot = { version = "0.12", optional = true }

# Random number generation
rand = "0.8"
rand_distr = "0.4"
rand_chacha = "0.3"

# Testing utilities
approx = "0.5"

# Visualization (optional)
plotly = { version = "0.8", optional = true }
plotters = { version = "0.3", optional = true }
plotters-backend = { version = "0.3", optional = true }  
plotters-bitmap = { version = "0.3", optional = true }

# Advanced 3D visualization and real-time interaction (Phase 11)
egui = { version = "0.29", optional = true }
eframe = { version = "0.29", optional = true }
egui-wgpu = { version = "0.29", optional = true }
egui-winit = { version = "0.29", optional = true }
three-d = { version = "0.17", optional = true }
winit = { version = "0.30", optional = true }
pollster = { version = "0.3", optional = true }
futures = { version = "0.3", optional = true }

# WebGL and WASM support
wasm-bindgen = { version = "0.2", optional = true }
web-sys = { version = "0.3", optional = true }
js-sys = { version = "0.3", optional = true }
console_error_panic_hook = { version = "0.1", optional = true }

# VR/AR support
openxr = { version = "0.17", optional = true }
nalgebra = { version = "0.32" }

# Image processing and export
image = { version = "0.24", optional = true }
resvg = { version = "0.38", optional = true }

# Lazy static initialization
lazy_static = "1.4"

# Hash computation for checksums
md5 = "0.7"

# Regular expressions (for pattern validation)
regex = "1.8"

# System information
sysinfo = "0.29"

# Async runtime (for future async features)
tokio = { version = "1.0", features = ["full"], optional = true }

# Memory management
crossbeam = "0.8"

# HDF5 support
# hdf5 = { version = "0.8", optional = true }
# hdf5-sys = { version = "0.8", optional = true }

# Mathematical constants and functions
libm = "0.2"

# GPU acceleration dependencies  
cudarc = { version = "0.11", features = ["cuda-12050"], optional = true }
wgpu = { version = "22.0", features = ["wgsl"], optional = true }
bytemuck = { version = "1.14", features = ["derive"], optional = true }

# AI/ML Integration
ort = { version = "2.0.0-rc.2", optional = true }
candle-core = { version = "0.9", optional = true }
candle-nn = { version = "0.9", optional = true }
# tch = { version = "0.14", optional = true }

[dev-dependencies]
criterion = "0.4"
proptest = "1.2"
mockall = "0.11"

[features]
default = []
parallel = ["dep:parking_lot"]
# hdf5 = ["dep:hdf5", "dep:hdf5-sys"]
plotting = ["plotters", "plotters-backend", "plotters-bitmap"]
gpu = ["wgpu", "bytemuck", "futures", "pollster"]
advanced-visualization = ["gpu", "wgpu", "bytemuck", "futures", "pollster", "winit", "egui", "egui-wgpu", "egui-winit"]
ml = ["ort", "candle-core", "candle-nn"]
nightly = []
web-visualization = ["plotting"]
vr-support = ["advanced-visualization"]
full = ["parallel", "plotting", "gpu", "advanced-visualization", "ml"]

[profile.release]
opt-level = 3
lto = true
codegen-units = 1
panic = "abort"

[profile.dev]
opt-level = 0
debug = true

[[bench]]
name = "physics_benchmarks"
harness = false

[[bench]]
name = "grid_benchmarks"
harness = false

[[bench]]
name = "validation_benchmarks"
harness = false

[package.metadata.docs.rs]
all-features = true
rustdoc-args = ["--cfg", "docsrs"]

[package.metadata.release]
pre-release-commit-message = "chore: prepare for release {{version}}"
tag-name = "v{{version}}"
tag-message = "Release {{version}}"

